version: '3.8'

services:
  # Backend API Service
  aqi-backend:
    build:
      context: ..
      dockerfile: app/deploy/Dockerfile
    container_name: aqi-forecasting-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PROD_HOST=0.0.0.0
      - PROD_PORT=8000
      - PROD_WORKERS=4
      - LOG_LEVEL=INFO
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    volumes:
      - ../data_repositories:/app/data_repositories
      - ../saved_models:/app/saved_models
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aqi-network

  # Frontend Streamlit Service
  aqi-frontend:
    build:
      context: ..
      dockerfile: app/deploy/Dockerfile
    container_name: aqi-forecasting-frontend
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_API_BASE=http://aqi-backend:8000
    volumes:
      - ../data_repositories:/app/data_repositories
      - ../saved_models:/app/saved_models
      - ./logs:/app/logs
    command: ["streamlit", "run", "app/frontend/streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    depends_on:
      aqi-backend:
        condition: service_healthy
    networks:
      - aqi-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: aqi-redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - aqi-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aqi-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - aqi-backend
      - aqi-frontend
    networks:
      - aqi-network

  # Monitoring Service (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: aqi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aqi-network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: aqi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning
    networks:
      - aqi-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  aqi-network:
    driver: bridge
